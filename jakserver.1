.TH JAKSERVER 1 "13 July 2024" "jakserver"
.SH NAME
jakserver \- the most basic pseudo http server with requests passed off to a shell script
.SH SYNOPSYS
.I jakserver
-x handler_script [-H ip] [-p port] [-q] [-v] [-0 /dev/shm]
.SH OPTIONS
.TP
.BI -h
Shows help.
.TP
.BI -x " handler_script"
Specify a path to a shell script which will handle requests. See
.I "HANDLER SCRIPT"
for details on its interface.
.TP
.BI -0 " /directory/path"
Request bodies will be passed to the handler script via its standard input. However, data needs to be stored somewhere, so that
.I "/directory/path"
is used as a buffer. Recommended values are
.I "/dev/shm"
or
.IR "/tmp" .
.TP
.BI -q
Quiet mode. Prints out less stuff to standard error.
.TP
.BI -v
Verbose mode. Prints debug information to standard error.
.TP
.BI -H " ip"
Interface to bind. Default 
.IR "0.0.0.0" .
.TP
.BI -p " port"
Pick a different port than 8080.
.SH DESCRIPTION
.I jakserver
is the most basic HTTP server I could put together.
.PP
It doesn't do much by itself. It does some basic command line argument parsing, binds a socket, accepts connections, and does some basic HTTP request parsing.
.PP
It listens for HTTP/1.1 requests. It checks the 
.I "Content-Length"
header, and, if present, tries to read a body of that length. After it considers it has read enough of your request, and it didn't decide you're trying to scam it, it hands off execution to the
.IR "Handler Script" .
.PP
You can think of it as a "cgi only micro http server", even though it makes no effort to be compatible with the `CGI' spec (at least not right now). See
.I "HANDLER SCRIPT"
for the interface between
.I jakserver
and the handler program.
.SH CONFIGURATION
.I jakserver
does not have any runtime configuration --apart from the command line arguments--, but it does have compile time arguments. These can be tweaked through
.IR CFLAGS .
.TP
.BI REQUEST_SIZE_LIMIT " 1048576"
Rejects requests whose larger than this value. Value is in bytes.
.TP
.BI TIMEOUT_LIMIT " 30"
Closes the socket if the client takes longer than this amount of seconds to send the request.
.TP
.BI HANDLER_TIMEOUT_LIMIT " TIMEOUT_LIMIT"
If this is > 0, sets an
.BR alarm (3)
before calling
.BR exec (3)
to the handler script. The value is in seconds.
.TP
.BI MAX_BACKLOG " 10"
.I backlog
parameter passed to
.BR listen (3).
.PP
Any other configuration is the responsibility of your
.IR "HANDLER SCRIPT" .
.SH "HANDLER SCRIPT"
The
.I handler_script
represents the brains and server configuration. It is passed the
.I "Request Method"
and
.I "Request Path"
as the first (and only) two arguments.
.PP
Unless
.BI -0 " path"
is specified, the headers and body (if any) are in the
.I REQHEADERS
and
.I REQBODY
environment variables.
.PP
If
.BI -0 " path"
is specified, the headers are in the
.I REQHEADERS
environment variable, and the body (if any) is on standard input. If
.I Content-Length
was 0, or the request otherwise didn't have a body, standard input will be closed. The temporary files are immediately unlinked and get autodeleted when the request handler ends. Using
.IR tmpfs (5)
is recommended, as this buffer is used only to be able to retain memory afrer
.IR exec (3)
is called.
.PP
If
.I jakserver
is compiled with
.IR HANDLER_TIMEOUT_LIMIT
> 0, then the handler program will receive
.I SIGALRM
after the specified amount of time if it didn't finish processing the request.
.PP
It is expected that the script write out an HTTP response on standard output. It must always write out an HTTP response to standard output, don't leave clients hanging!
.PP
This is usually a shell script, but there's nothing wrong with coding up a web application in pure C/C++!
.PP
.SH SEE ALSO
.BR thttpd (1)
,
.BR nginx (1)
,
.BR lighttpd (1)
,
.BR httpd (1)
,
.BR darkhttpd (1)
.SH AUTHOR
Vlad Me»ôco <vlad.mesco@gmail.com>

This project started life at <https://github.com/alzwded/mpvkiosk>
.SH LIMITATIONS
Recommended for prototyping or home use only. The software is provided "as is" and any express or implied warranties and fitness for a particular purpose are disclaimed.
.PP
It parses the request headers to find the
.I "Content-Length"
header. If `Content-Length' is undefined or 0, it does not read the body and stops at CRLF. While processing headers, it makes all of them lowercase (the left hand side of `:'.
.PP
It assumes and only accepts
.I HTTP/1.1
or
.IR HTTP/1.0 .
.PP
The server does not entertain
.BI Transfer-Encoding: chunked
and will assume a
.I Content-Length
of 0 and not pass on a body to the handler. This applies to
.I requests
and not to responses. Responses have free reign when it comes to what they send back and how (TIMEOUT_LIMIT not withstanding).
.PP
IPv4 only. Maybe IPv6 one day, but that just adds unnecessary complexity, given its present day requirements. But it shouldn't be terribly difficult to add support.
.PP
The
.I "handler_script"
needs to be something the shell can execute, i.e.
.I "./echo_handler.sh"
or
.IR "/var/www/webapp.sh" .
It must be executable.
.PP
The server makes no effort to split/parse the
.I "REQUEST PATH"
(2nd) argument of the
.IR "handler_script" .
This shouldn't be an issue, as you can search for 
.B "?"
and separate the query/parameters from your actual path. And also deal with `;', which is also a way to add parameters to URLs. The path might be application-specific, though, I didn't read the RFC carefully.
.PP
Without using the
.BI "-0" " dirpath"
option, you cannot easily accept binary data, as environment variables are set as text. For example, it will be truncated at the first
.IR NULL .
Even with pure text data, the request can only be so big. The command line and the
.I environ
table are stored in a somewhat fixed sized buffer, and the size depends on your system. At least 100KB, sometimes 2MB, maybe more. The request is additionally limitted to
.I REQUEST_SIZE_LIMIT
(1MB) by the server itself.
.PP
If you want to accept either large or otherwise binary requests, do use the
.BI "-0" " dirpath"
option. The headers are still passed through env vars, but the bulk of the data should be the body, and that's dealt with.
.PP
The HTTP request parser expects the
.I Content-Length
header to fit on one line, without continuation.
.PP
.B "DO NOT"
under any circumstances use this for any production purposes. You have been warned. Use something tried and tested whose project goals include
.B security
somewhere near the top.
