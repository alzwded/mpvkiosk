.TH JAKSERVER 1 "13 July 2024" "jakserver"
.SH NAME
jakserver \- the most basic pseudo http server with requests passed off to a shell script
.SH SYNOPSYS
.I jakserver
-x handler_script [-H ip] [-p port] [-q]
.SH OPTIONS
.TP
.BI -h
Shows help.
.TP
.BI -x " handler_script"
Specify a path to a shell script which will handle requests. See
.I "HANDLER SCRIPT"
for details on its interface.
.TP
.BI -q
Quiet mode. Prints out less stuff to standard error.
.TP
.BI -H " ip"
Interface to bind. Default 
.IR "0.0.0.0" .
.TP
.BI -p " port"
Pick a different port than 8080.
.SH DESCRIPTION
.I jakserver
is the most basic HTTP server I could put together.
.PP
It doesn't do much by itself. It does some basic command line argument parsing, binds a socket, accepts connections, and does some basic HTTP request parsing.
.PP
It listens for HTTP/1.1 requests. It checks the 
.I "Content-Length"
header, and, if present, tries to read a body of that length. After it considers it has read enough of your request, and it didn't decide you're trying to scam it, it hands off execution to the
.IR "Handler Script" .
.PP
You can think of it as a "cgi only micro http server", even though it makes no effort to be compatible with the `CGI' spec (at least not right now). See
.I "HANDLER SCRIPT"
for the interface between
.I jakserver
and the handler program.
.SH CONFIGURATION
.I jakserver
does not have any runtime configuration --apart from the command line arguments--, but it does have compile time arguments. These can be tweaked through
.IR CFLAGS .
.TP
.BI CONTENT_LENGTH_LIMIT " 1048576"
Rejects requests whose
.I "Content-Length"
is larger than this value. Value is in bytes.
.TP
.BI TIMEOUT_LIMIT " 30"
Closes the socket if the client takes longer than this amount of seconds to send the request.
.TP
.BI HANDLER_TIMEOUT_LIMIT " TIMEOUT_LIMIT"
If this is > 0, sets an
.BR alarm (3)
before calling
.BR exec (3)
to the handler script. The value is in seconds.
.TP
.BI MAX_BACKLOG " 10"
.I backlog
parameter passed to
.BR listen (3).
.PP
Any other configuration is the responsibility of your
.IR "HANDLER SCRIPT" .
.SH "HANDLER SCRIPT"
The
.I handler_script
represents the brains and server configuration. It is passed the
.I "Request Method"
and
.I "Request Path"
as the first (and only) two arguments.
.PP
The headers and body (if any) are in the
.I REQHEADERS
and
.I REQBODY
environment variables.
.PP
It is expected that the script write out an HTTP response on standard output. It must always write out an HTTP response to standard output, don't leave clients hanging!
.PP
This is usually a shell script, but there's nothing wrong with coding up a web application in pure C/C++!
.PP
If compiled with
.IR HANDLER_TIMEOUT_LIMIT " > 0"
then the handler program will receive a
.I SIGALRM
after that many seconds if it doesn't finish until then.
.SH SEE ALSO
.BR thttpd (1)
,
.BR nginx (1)
,
.BR lighttpd (1)
,
.BR httpd (1)
,
.BR darkhttpd (1)
.SH AUTHOR
Vlad Me»ôco <vlad.mesco@gmail.com>

This project started life at <https://github.com/alzwded/mpvkiosk>
.SH LIMITATIONS
Be warned, this is not a proper and conformant HTTP server. It merely tries to look like one to the extent that accessing it from a browser allows one to interact with some service. Use it for prototyping only.
.PP
It only reads the
.I "Content-Length"
header, nothing else. If `Content-Length' is undefined or 0, it does not read the body.
.PP
It assumes and only accepts
.IR HTTP/1.1 .
.PP
IPv4 only. Maybe IPv6 one day, but that just adds unnecessary complexity, given its present day requirements.
.PP
The
.I "handler_script"
needs to be something the shell can execute, i.e.
.I "./echo_handler.sh"
or
.IR "/var/www/cgi/handler.sh" .
It must be executable.
.PP
The server makes no effort to split the
.I PATH
(2nd) argument of the
.IR "handler_script" .
This shouldn't be an issue, as you can search for 
.B "?"
and separate the query/parameters from your actual path. And also deal with `;', which is also a way to add parameters to URLs.
.PP
Because the body and the headers are passed through environment variables, the request can only be so big. It depends on your system. At least 100KB, usually 2MB. The body is additionally limitted to
.I CONTENT_LENGTH_LIMIT
(1MB) by the server itself.
.PP
.B "DO NOT"
under any circumstances use this for any production purposes. You have been warned.
